// source: .scripts/atom/atom-keymap/helpers.js
/* eslint-disable */

var /* [...] */ MODIFIERS, /* [...] */ WHITESPACE_REGEX, /* [...] */ isKeyup, /* [...] */ isLowerCaseCharacter, isUpperCaseCharacter, /* [...] */ normalizeKeystroke, parseKeystroke/* [...] */;

// [...]

MODIFIERS = new Set(['ctrl', 'alt', 'shift', 'cmd']);

// [...]

WHITESPACE_REGEX = /\s+/;

// [...]

isUpperCaseCharacter = function(character) {
  return (character != null) && character.length === 1 && character.toLowerCase() !== character;
};

isLowerCaseCharacter = function(character) {
  return (character != null) && character.length === 1 && character.toUpperCase() !== character;
};

// [...]

exports.normalizeKeystrokes = function(keystrokes) {
  var j, keystroke, len, normalizedKeystroke, normalizedKeystrokes, ref;
  normalizedKeystrokes = [];
  ref = keystrokes.split(WHITESPACE_REGEX);
  for (j = 0, len = ref.length; j < len; j++) {
    keystroke = ref[j];
    if (normalizedKeystroke = normalizeKeystroke(keystroke)) {
      normalizedKeystrokes.push(normalizedKeystroke);
    } else {
      return false;
    }
  }
  return normalizedKeystrokes.join(' ');
};

normalizeKeystroke = function(keystroke) {
  var i, j, key, keys, keyup, len, modifiers, primaryKey;
  if (keyup = isKeyup(keystroke)) {
    keystroke = keystroke.slice(1);
  }
  keys = parseKeystroke(keystroke);
  if (!keys) {
    return false;
  }
  primaryKey = null;
  modifiers = new Set;
  for (i = j = 0, len = keys.length; j < len; i = ++j) {
    key = keys[i];
    if (MODIFIERS.has(key)) {
      modifiers.add(key);
    } else {
      if (i === keys.length - 1) {
        primaryKey = key;
      } else {
        return false;
      }
    }
  }
  if (keyup) {
    if (primaryKey != null) {
      primaryKey = primaryKey.toLowerCase();
    }
  } else {
    if (isUpperCaseCharacter(primaryKey)) {
      modifiers.add('shift');
    }
    if (modifiers.has('shift') && isLowerCaseCharacter(primaryKey)) {
      primaryKey = primaryKey.toUpperCase();
    }
  }
  keystroke = [];
  if (!keyup || (keyup && (primaryKey == null))) {
    if (modifiers.has('ctrl')) {
      keystroke.push('ctrl');
    }
    if (modifiers.has('alt')) {
      keystroke.push('alt');
    }
    if (modifiers.has('shift')) {
      keystroke.push('shift');
    }
    if (modifiers.has('cmd')) {
      keystroke.push('cmd');
    }
  }
  if (primaryKey != null) {
    keystroke.push(primaryKey);
  }
  keystroke = keystroke.join('-');
  if (keyup) {
    keystroke = "^" + keystroke;
  }
  return keystroke;
};

parseKeystroke = function(keystroke) {
  var character, index, j, keyStart, keys, len;
  keys = [];
  keyStart = 0;
  for (index = j = 0, len = keystroke.length; j < len; index = ++j) {
    character = keystroke[index];
    if (character === '-') {
      if (index > keyStart) {
        keys.push(keystroke.substring(keyStart, index));
        keyStart = index + 1;
        if (keyStart === keystroke.length) {
          return false;
        }
      }
    }
  }
  if (keyStart < keystroke.length) {
    keys.push(keystroke.substring(keyStart));
  }
  return keys;
};

// [...]

exports.MODIFIERS = MODIFIERS;

// [...]

exports.isKeyup = isKeyup = function(keystroke) {
  return keystroke.startsWith('^') && keystroke !== '^';
};

// [...]

// ---
// generated by coffee-script 1.9.2
